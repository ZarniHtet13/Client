   // This stupid test is mostly a way for me to put everything else in
  // an "else if" clause.
  if (0)
    ;

  // Handle i2i
  else if (g_strcmp0 (method_name, "i2i") == 0)
    {
      int x;
      g_variant_get (parameters, "(i)", &x);
#ifdef VERBOSE
      printf ("i2i(%d)\n", x);
#endif
      g_dbus_method_invocation_return_value (invocation, 
                                             g_variant_new ("(i)", x*x));
    } // i2i

  // Handle i2s
  else if (g_strcmp0 (method_name, "i2s") == 0)
    {
      int x;		// Our input value
      gchar *response;	// Our output value
      g_variant_get (parameters, "(i)", &x);
#ifdef VERBOSE
      printf ("i2s(%d)\n", x);
#endif
      // g_strdup_printf is an awesome function that builds a new string
      // using the structure of printf.  You will need to free that string
      // at some point, using g_free.
      response = g_strdup_printf ("%d", x);
      g_dbus_method_invocation_return_value (invocation, 
                                             g_variant_new ("(s)", response));
      // Ooh!  We can do things after we return a value.  The wonder of
      // asynchronous code.
      g_free (response);
    } // i2s

 // Handle v2i
  else if (g_strcmp0 (method_name, "v2i") == 0)
    {
#ifdef VERBOSE
      printf ("v2i()\n");
#endif
      g_dbus_method_invocation_return_value (invocation,
                                             g_variant_new ("(i)", 42));
    } // v2i
